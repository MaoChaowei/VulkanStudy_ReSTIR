#version 460
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_ray_query : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_GOOGLE_include_directive : enable
#extension  GL_ARB_shader_clock:require

#include "host_device.h"
#include "sampling.glsl"
#include "raycommon.glsl"

layout(local_size_x = CS_WORK_GROUP_SIZE_X, local_size_y = CS_WORK_GROUP_SIZE_Y, local_size_z = 1) in;

layout(set=0,binding=eReservoirCur,scalar) buffer ReservoirCur_{Reservoir current[];};
layout(set=0,binding=eReservoirPrev,scalar) buffer ReservoirPrev_{Reservoir previous[];};

layout(set=1,binding=eWorldPosition, rgba32f) uniform image2D wPosGbuffer;
layout(set=1,binding=eWorldNormal, rgba16f) uniform image2D wNormGbuffer;
layout(set=1,binding=eMatKs, rgba8) uniform image2D KsGbuffer;
layout(set=1,binding=eComputeOutImage, rgba32f) uniform image2D image;

layout(set = 2, binding = eTlas) uniform accelerationStructureEXT topLevelAS;

layout(buffer_reference, scalar) buffer EmitterTriangles{ EmitTriangle i[];}; // Array of emissive triangles
layout(buffer_reference, scalar) buffer EmitterPrefixSum{ float i[];}; // prefix sum of the emitter triangles
layout(push_constant) uniform _PushConstantRIS { PushConstantComputeRIS pcRIS; };

uint binarySearchEmitFace(float u)
{
    u = clamp(u, 0.0f, 1.0-EPSILON);
    EmitterPrefixSum presum_=EmitterPrefixSum(pcRIS.emitterPrefixSumAddress);

    // find the first emissive triangle(idx=i-1) in etris_ such that presum_[i]>=u
    float threshold = 1.0*u;
    uint lt = 0, rt = pcRIS.emitterTriangleNum - 1;

    while (lt < rt)
    {
        uint mid = (lt + rt) / 2;
        if (presum_.i[mid + 1] < threshold)
        {
            lt = mid + 1;
        }
        else
        {
            rt = mid;
        }
    }

    return lt;
}

float getLuminance(vec3 radiance_rgb)
{
  return (0.2126 * radiance_rgb[0] + 0.7152 * radiance_rgb[1] + 0.0722 * radiance_rgb[2]);
}

bool updateReservoir(inout Reservoir r,LightSample lightSample,float src_pdf,float target_pdf,uint seed){
    // struct Reservoir
    // {
    //   LightSample keptSample;
    //   float       totalWeight;  // current weight
    //   uint        sampleNum;    // seen this much of samples so far
    //   float       targetPdf;    // (target pdf value)
    // };
    // if candidate's pdf is too small, just ignore it
    if(target_pdf<EPSILON||src_pdf<EPSILON){
        r.sampleNum+=1;
        return false;
    }
    float weight=target_pdf/src_pdf;
    r.sampleNum+=1;
    r.totalWeight+=weight;
    if(rnd(seed)<weight/r.totalWeight){
        r.keptSample=lightSample;
        r.targetPdf=target_pdf;
        return true;
    }

    return false;
}

void main(){
    // get the size of the image
    ivec2 imgSize = imageSize(wPosGbuffer);
    if(gl_GlobalInvocationID.x>=imgSize.x||gl_GlobalInvocationID.y>=imgSize.y)
        return;

    uint pixel_idx=gl_GlobalInvocationID.y * imgSize.x + gl_GlobalInvocationID.x;
    uint seed = tea(pixel_idx, int(clockARB()));

    vec3 worldPos=imageLoad(wPosGbuffer,ivec2(gl_GlobalInvocationID.xy)).xyz;
    vec3 worldNrm=imageLoad(wNormGbuffer,ivec2(gl_GlobalInvocationID.xy)).xyz;
    vec3 ks=imageLoad(KsGbuffer,ivec2(gl_GlobalInvocationID.xy)).xyz;
    EmitterTriangles emitters=EmitterTriangles(pcRIS.emitterTrianglesAddress);

    // get current reservoir
    Reservoir cur_r=current[pixel_idx];
    cur_r.totalWeight=0;
    cur_r.sampleNum=0;

    // record some data of the chosen sample
    vec3 final_shadow_ray_dir=vec3(0.f);
    float final_light_dist=0.f;
    float final_lightNdotL=0.f;
    float final_srcNdotL=0.f;

    for(int i=0;i<pcRIS.CandidateNum;++i){
        //------------------------------------//
        //      direct light sampling         //
        //------------------------------------//
        // Sampling a light point with pdf(A)=pointWeight/totalWeight
        uint emitTriangleID=binarySearchEmitFace(rnd(seed));
        EmitTriangle emitTriangle=emitters.i[emitTriangleID];

        float u1=rnd(seed);
        float u2=rnd(seed);
        if(u1+u2>1.0){
            u1=1-u1;
            u2=1-u2;
        }
        
        vec3 dst_pos = (1 - u1 - u2) * emitTriangle.m_vpos[0] + u1 *emitTriangle.m_vpos[1] + u2 * emitTriangle.m_vpos[2];
        vec3 light_norm = emitTriangle.m_normal;
        vec3 light_radiance=emitTriangle.m_radiance;


        vec3 shadow_ray_dir=dst_pos-worldPos;
        float light_dist=length(shadow_ray_dir);
        shadow_ray_dir=normalize(shadow_ray_dir);

        float lightNdotL=max(dot(light_norm,-shadow_ray_dir),0);
        float srcNdotL=max(dot(worldNrm,shadow_ray_dir),0);

        // ignore bad samples
        if(lightNdotL<=0||srcNdotL<=0||light_dist<EPSILON)
            continue;
            
        float d2=light_dist*light_dist;
        float pdf_light=getLuminance(light_radiance)/pcRIS.emitterTotalWeight;
        float pdf_source=pdf_light*(d2/lightNdotL);// converted to pdf_w
        float pdf_target = getLuminance( light_radiance) * srcNdotL * lightNdotL / (PI * d2);

        LightSample light_sample;
        light_sample.lightPos=dst_pos;
        light_sample.lightNrm=light_norm;
        light_sample.radiance=light_radiance;

        bool is_preserved=updateReservoir(cur_r,light_sample,pdf_source,pdf_target,seed);

        if(is_preserved){
            final_shadow_ray_dir=shadow_ray_dir;
            final_light_dist=light_dist;
            final_lightNdotL=lightNdotL;
            final_srcNdotL=srcNdotL;
        }
    }

    // trace shadow ray to test visibility
    if(final_lightNdotL<=0||final_srcNdotL<=0||final_light_dist<EPSILON)
    {
        cur_r.totalWeight=0.f;
    }
    else
    {
        vec3 rayOrigin=worldPos+worldNrm*0.01;
        rayQueryEXT rayQuery;                           // First, initialize a ray query object
        rayQueryInitializeEXT(rayQuery,                 // Ray query
                            topLevelAS,                 // Top-level acceleration structure
                            gl_RayFlagsOpaqueEXT,       // Ray flags, here saying "treat all geometry as opaque"
                            0xFF,                       // 8-bit instance mask, here saying "trace against all instances"
                            rayOrigin,                  // Ray origin
                            0.0,                        // Minimum t-value
                            final_shadow_ray_dir,       // Ray direction
                            float(INF_T));              // Maximum t-value
        
        while(rayQueryProceedEXT(rayQuery));

        float tHit =float(INF_T);
        if(rayQueryGetIntersectionTypeEXT(rayQuery, true)!= gl_RayQueryCommittedIntersectionNoneEXT){
            tHit = rayQueryGetIntersectionTEXT(rayQuery, true);
        }

        // failed the shadow test
        if(abs(tHit-final_light_dist)>0.1){
            cur_r.totalWeight=0.f;
        }
    }

    // write back
    current[pixel_idx]=cur_r;

    // vec3 color=imageLoad(KsGbuffer,ivec2(gl_GlobalInvocationID.xy)).xyz;
    // visualize the kept sample
    // vec3 color=(cur_r.keptSample.lightNrm+vec3(1))*0.5;
    // vec3 color=vec3(cur_r.totalWeight/10.f);
    // imageStore(image, ivec2(gl_GlobalInvocationID.xy), vec4(color,1));
}
