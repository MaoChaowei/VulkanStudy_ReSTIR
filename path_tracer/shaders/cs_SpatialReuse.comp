#version 460
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_ray_query : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_GOOGLE_include_directive : enable
#extension  GL_ARB_shader_clock:require

#include"host_device.h"
#include "sampling.glsl"
#include "raycommon.glsl"
#include "reservoir.glsl"

layout(local_size_x = CS_WORK_GROUP_SIZE_X, local_size_y = CS_WORK_GROUP_SIZE_Y, local_size_z = 1) in;

layout(set=0,binding=eReservoirCur,scalar) buffer ReservoirCur_{Reservoir current[];};
layout(set=0,binding=eReservoirPrev,scalar) buffer ReservoirPrev_{Reservoir previous[];};

layout(set=1,binding=eWorldPosition, rgba32f) uniform image2D wPosGbuffer;
layout(set=1,binding=eWorldNormal, rgba16f) uniform image2D wNormGbuffer;
layout(set=1,binding=eMatKs, rgba8) uniform image2D KdGbuffer;
layout(set=1,binding=eComputeOutImage, rgba32f) uniform image2D image;

layout(push_constant) uniform _PushConstantComputeSpatial { PushConstantComputeSpatial pcSpatial; };

# define SAMPLE_RADIUS 5

void main(){
    // get the size of the image
    ivec2 imgSize = imageSize(wPosGbuffer);
    if(gl_GlobalInvocationID.x>=imgSize.x||gl_GlobalInvocationID.y>=imgSize.y)
        return;
        
    uint pixel_idx=gl_GlobalInvocationID.y * imgSize.x + gl_GlobalInvocationID.x;
    uint seed = tea(pixel_idx, int(clockARB()));

    vec3 worldPos=imageLoad(wPosGbuffer,ivec2(gl_GlobalInvocationID.xy)).xyz;
    vec3 worldNrm=imageLoad(wNormGbuffer,ivec2(gl_GlobalInvocationID.xy)).xyz;
    vec3 kd=imageLoad(KdGbuffer,ivec2(gl_GlobalInvocationID.xy)).xyz;

    // get current reservoir
    Reservoir cur_r=current[pixel_idx];
    uint sampleNum=cur_r.sampleNum;
    // randomly pick up `pcSpatial.k_neighbors_num` samples; update reservoir
    for(int i=0;i<pcSpatial.k_neighbors_num;++i){
        vec2 temp=sampleDisk(float(SAMPLE_RADIUS),rnd(seed),rnd(seed));
        ivec2 pos={int(gl_GlobalInvocationID.x)+int(temp.x),int(gl_GlobalInvocationID.y)+int(temp.y)};
        pos.x=clamp(pos.x,0,imgSize.x-1);
        pos.y=clamp(pos.y,0,imgSize.y-1);

        vec3 neighborPos=imageLoad(wPosGbuffer,ivec2(pos.xy)).xyz;
        vec3 neighborNorm=imageLoad(wNormGbuffer,ivec2(pos.xy)).xyz;

        // ignore neighbors whose position or normal is far different from current's.
        if(dot(neighborNorm,worldNrm)<0.8||length(neighborPos-worldPos)>0.01)
            continue;

        Reservoir neighbor_r=current[pos.y * imgSize.x + pos.x];
        sampleNum+=neighbor_r.sampleNum;

        vec3 light_radiance=neighbor_r.keptSample.radiance;
        vec3 light_pos=neighbor_r.keptSample.lightPos;

        vec3 shadow_ray_dir=light_pos-worldPos;
        shadow_ray_dir=normalize(shadow_ray_dir);

        float srcNdotL=max(dot(worldNrm,shadow_ray_dir),0);

        float target_pdf=getLuminance(light_radiance*kd) * srcNdotL ;

        float adjusted_weight=target_pdf*neighbor_r.sampleWeight*neighbor_r.sampleNum;

        updateReservoir(cur_r,neighbor_r.keptSample, adjusted_weight, target_pdf ,seed);
        // updateReservoir(cur_r,neighbor_r.keptSample, adjusted_weight ,seed);
    
    }
    // calculate keptSample's weight
    cur_r.sampleNum=sampleNum;
    cur_r.sampleWeight=(1.0/cur_r.target_pdf)*(cur_r.totalWeight/cur_r.sampleNum);

    // write back
    previous[pixel_idx]=cur_r;


}
